longer term changes:
- reduce the capability of functions eg:
    completely separate getHdf from runGdal (also getProduct, getCollection etc should be removed from those functions.
    This should allow runGdal to run in a more general manner like a input file list that is crunched. This should result in some more lines to code when using runGdal but is also allows more freedom and performance. AND last but not least at all also much easier handling of the package development.
  MOD and MYD should still be run by one call, but not eg: MxD13A1 and MxD13A2. This change would simplify a lot the package development.
- I was quite good to avoid the creation of classes, I am not sure if we really need it...maybe yes? S3 should be enough I guess? 
- Accelerate 'Downloading structure on ...'
- Any file in 'inst/external' no longer required? 
- get rid of certain dependencies, eg. 'maptools'

detectBitInfo()
- recent products supported? (see whittaker.raster)
- update QA information in look-up table
- implement quality control routines for various products?

MODISoptions() 
- Check for presence of .netrc file (<-> LP DAAC, LAADS, NSIDC support)   

runGdal()
- an 'HdfName' argument (just like in getHdf()) could be of advantage in the 
  sense that if one (or numerous) local .hdf file is specified, an online 
  retrieval (of collection, available dates, etc.) is entirely turned off
- include scale factor during SDS extraction?  
- speed up when downloaded hdf / processed tif files are already present
  
qualityControl
- method based on maximum value from preceding / current / succeeding image (i.e., from user-defined window) as proposed by Yang et al. (2013, http://dx.doi.org/10.1109/LGRS.2012.2219576)

whittaker.raster()  
- set (optional) thresholds to get rid of too high or low (i.e., outside [-1;1]) values resulting from smoothing spline
- output file names not in agreement with MODIS naming convention (i.e., timestamps start/end at the 5th/11th position rather than 15th/21st)

getHdf():
- download is not possible for Swath products, see eg. https://github.com/fdetsch/MODIS/issues/18

getGranule():
- tileH,tileV
- remaining 'extent' inputs (sf::st_bbox, MODISextent, character, Raster*, missing)

getCollection():
- retrieval from LAADS (ie. MOD03), particularly during LPDAAC downtime

Automated wget, curl check if any("LPDAAC", "NSIDP") %in% opts$MODISserverOrder

General solution for "//"

Save MODIS Sinusoidal proj4 string somewhere: +proj=sinu +lon_0=0 +x_0=0 +y_0=0 +R=6371007.181 +units=m +no_defs

getStruc():
- if specified, restrict to dates

getTile():
- if interactive and `mode = "draw"`, handle errors for incomplete shapes
- if non-interactive, display aoi

separate issues
* decide fate of `arcStats()`
* feed non-existing collection in `list` format to `getCollection()` and handle 
  'Error in cat([...])'

Standardize 'Earthdata Login' spelling

Enable Roxygen w/Markdown

Assertion on `MODISoptions()`, e.g. valid entries for 'MODISserverOrder'

curl installed with {curl} package? 
<-> would render `system('curl -h')` calls and testing for wget obsolete
--> test in docker environment

find appropriate place for `EarthdataLogin()` if usr and/or pwd is missing

streamline `getStruc()`
<-> currently run in `runGdal()` and, under the hood, `getHdf()`

leverage `gdalwarp` -wo functionality (https://gdal.org/programs/gdalwarp.html#cmdoption-gdalwarp-wo)

put deprecated functions on defunct

`getUTMZone()` throws warnings when running examples

Examples, Details, etc.

runGdal():
* [ ] file name in 'Getting file from: LPDAAC'
* [ ] optionally turn off 'maskValue', i.e. "None" in `gdalwarp` 
     (https://gdal.org/programs/gdalwarp.html#cmdoption-gdalwarp-srcnodata)
* [x] check if '-dstnodata' is required